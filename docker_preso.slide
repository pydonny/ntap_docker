NetApp and Containers
Where we are in September 2017

Donald Casson
Super Tuesday
@iggby
donald.casson@netapp.com

* Agenda
-	What are and Why containers?
-	How it works?
-	Basic construction
-	How Kubernetes and others work with Containers
-	Implementation with NetApp – What problems do we solve
-	Key takeways and future..

* What are and Why containers?

* What are and Why containers?
Containers are not virtual machines!
.image img/not_vms.png _ 350

Virtual Machines:

- VMs are relatively large, composed of virtual hardware, a full OS, and the application, including dependencies

Containers:

- A container is just the application and its dependencies
- It runs as an isolated process in user space on the host OS


* What are and Why containers

- Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications
- Docker enables applications to be quickly assembled from components and eliminates friction between dev, test, QA, and production
- Do one thing, do it well
- Ship faster, run anywhere
.play hello.bat

* Applications are hard

.image img/app_mono.png _ _

* Applications are hard

Monolithic applications:

- Hard to update - single massive code base, turns into the big ball of spaghetti
- Single dimension of scalability

Waterfall development practices:

- Static, linear phases
- Requirements
- Analysis
- Design
- Code
- Test
- Deploy

* Simplify the Problem
.image img/app_soa.png _ _

* Simplify the Problem

Service-Oriented Architecture:

- New term = microservices
- Each component is independently developed and scaled

Everything is a platform:

- DevOps
- Continuous Integration – Finding and fixing bugs faster
- Continuous Deployment – Releasing faster


* Virtualization as a First Step

.image img/vmware.jpg

* Virtualization as a First Step

Virtual machines are easier than physical:

- Light weight, deploy quickly
- Decoupled from hardware

Declarative configuration management:

- Puppet, Chef, Salt, Ansible
- Remove manual process from deployment and configuration operations

AWS and OpenStack made self-service mainstream

* (Re)Enter Containers

.image img/docker.png

* (Re)Enter Containers

- Lightweight, fast, portable
- A lot like Object Oriented Programming
- Inheritance, Encapsulation, Abstraction
- Now consumable by mortals!
- DevOps + Microservices + Containers = Maintainability and Scalability
- Containers decouple

* Containers should be ephemeral
The container produced by the image your Dockerfile defines should be as ephemeral as possible. By “ephemeral,” we mean that it can be stopped and destroyed and a new one built and put in place with an absolute minimum of set-up and configuration.

You may want to take a look at the Processes section of the 12 Factor app methodology to get a feel for the motivations of running containers in such a stateless fashion.

.link https://12factor.net/processes Process

* The 12 Factors
.link https://12factor.net/ 12factor.net
.image img/12factors.png 500 _


* Persistent Data
Configuration Data:

- Typically not stored with the application
- Database details
- Declaration of purpose
- Specific tasking
- Passed into application or accessed at startup
- Environment variables
- Etcd, Zookeeper, Consul, etc.

* Persistent Data

Instance Data:

- Data created by a container instance which does not need to persist beyond the life of the container
- Cache data
- Staging data / scratch space
- Container density can lead to high IO requirements for local drives

* Persistent Data

Shared Data:

- Data which is shared across multiple instances of a container image
- Apache htdocs folder
- Data which is shared across services
- Against 12 Factor principles
E.g. image processing service


* Persistent Data

X-as-a-service Data:

- Any storage which is consumed as-a-Service
- DBaaS
- RDS, DynamoDB
- Trove
- Object Storage
- S3
- Swift

* Introduction to the NetApp Docker Volume Plugin
.image img/intro_ndvp.png 560 _

* Introduction to the NetApp Docker Volume Plugin

- Transparently consume NetApp storage

Drivers for all NetApp primary storage platforms:

- ONTAP
- SolidFire
- E-Series

Open source!
.link http://github.com/netapp/netappdvp


* Diving into nDVP
Create a Volume

.code code/docker.sh /CREATE VOL/,/END CREATE/

nDVP will:

- Create a volume on specified aggr
- Thin provisioned, Snapshot Policy = none
- Create a LUN in the volume
- OS type = Linux, Thin provisioned

* Diving into nDVP
Using a Volume

.code code/docker.sh /USE VOL/,/END USE/

nDVP will:

- Add host iqn to igroup
- Map LUN if needed
- Rescan host adapters to attach LUN
- Format with ext4 (if needed)
- Mount at desired host location

* Diving into nDVP
Removing a container

.code code/docker.sh /REMOVE CONTAINER/,/END CONTAINER/

Docker will:

- Stop the container and clean up namespaces
- Remove COW layers

nDVP will:

- Unmount the LUN from the filesystem

* Diving into nDVP
Removing a volume

.code code/docker.sh /REMOVE VOL/,/END REMOVE/

nDVP will:

- Offline the LUN
- Destroy the LUN
- Rescan on host to disconnect
- Remove the volume

* Diving into nDVP
Moving a container


- Moving a container consists of stopping it on one host and starting on another
Host 1 nDVP will:

- Unmount the LUN from the filesystem
Host 2 nDVP will:

- Find the existing volume, making no modifications
- Add host to igroup
- Rescan HBA and mount volume

* Orchestrators - An Introduction to Kubernetes Storage & Trident
(switch to PowerPoint)

* Key Takeaways & Future...

Containers are supposed to be ephemeral/stateless:

- The NetApp goodness is about providing storage which follows the container for its life
- The state full data associated with a container can be configured through the Dockerfile
- No matter which node in cluster the data vol's will follow

Who should I be talking to:

- At the moment most new apps and some old will be being dockerised
- Dev's will be your best friend today
- As the tools and ecosystem mature Docker will become a key mechanism for software delivery to all levels of an organization
